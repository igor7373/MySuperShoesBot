import asyncio
import json

from apscheduler.jobstores.base import JobLookupError
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (Application, CommandHandler, ContextTypes,
                          ConversationHandler, JobQueue, MessageHandler,
                          filters, CallbackQueryHandler)

from config import (ADMIN_ID, BOT_USERNAME, CHANNEL_ID, INSOLE_LENGTH_MAP,
                    PAYMENT_DETAILS, TELEGRAM_BOT_TOKEN)
from database import (add_product, get_all_products, get_products_by_size, get_product_by_id, init_db,
                      set_product_sold, update_message_id, update_product_price,
                      update_product_sizes,
                      delete_product_by_id)

active_reservations = {}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
PHOTO, SELECTING_SIZES, ENTERING_PRICE, AWAITING_PROOF, AWAITING_NAME, AWAITING_PHONE, AWAITING_CITY, AWAITING_DELIVERY_CHOICE, AWAITING_NP_DETAILS, AWAITING_UP_DETAILS = range(10)
SETTING_DETAILS = 10
ENTERING_NEW_PRICE = 11
EDITING_SIZES = 12
AWAITING_SIZE_SEARCH = 13


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (deep link), –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏.
    –ò–Ω–∞—á–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    args = context.args
    if args and args[0].startswith('buy_'):
        try:
            product_id = int(args[0].split('_')[1])
        except (IndexError, ValueError):
            await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return

        product = get_product_by_id(product_id)
        user_id = update.effective_user.id

        if not product or not product['sizes']:
            await context.bot.send_message(
                chat_id=user_id,
                text="–í–∏–±–∞—á—Ç–µ, —Ü–µ–π —Ç–æ–≤–∞—Ä –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
        file_id = product['file_id']
        if file_id.startswith("BAAC"):
            await context.bot.send_video(chat_id=user_id, video=file_id)
        else:
            await context.bot.send_photo(chat_id=user_id, photo=file_id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        available_sizes = product['sizes'].split(',')

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã, —É–±–∏—Ä–∞—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        reserved_for_this_product = active_reservations.get(product_id, set())
        available_sizes = [size for size in available_sizes if size not in reserved_for_this_product]

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
        if not available_sizes:
            await context.bot.send_message(
                chat_id=user_id,
                text="–í–∏–±–∞—á—Ç–µ, –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑–∞—Ä–∞–∑ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
            return

        keyboard_buttons = [
            InlineKeyboardButton(size, callback_data=f"ps_{product['id']}_{size}")
            for size in available_sizes
        ]
        keyboard = [keyboard_buttons[i:i + 5] for i in range(0, len(keyboard_buttons), 5)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text="–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä–æ–∑–º—ñ—Ä:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –≤–∑—É—Ç—Ç—è.")


async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    await update.message.reply_text("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é —Ç–æ–≤–∞—Ä—É.")
    return PHOTO


async def photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã."""
    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.video:
        file_id = update.message.video.file_id
    elif update.message.document:
        file_id = update.message.document.file_id

    context.user_data['photo_id'] = file_id
    context.user_data['selected_sizes'] = []

    keyboard = create_sizes_keyboard([])
    await update.message.reply_text("–ú–µ–¥—ñ–∞—Ñ–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏:",
                                    reply_markup=keyboard)
    return SELECTING_SIZES


def create_sizes_keyboard(selected_sizes: list[int]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤."""
    keyboard = []
    all_sizes = list(range(28, 49))
    row = []
    for size in all_sizes:
        text = f"[ {size} ]" if size in selected_sizes else f"  {size}  "
        row.append(InlineKeyboardButton(text, callback_data=str(size)))
        if len(row) == 5:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î", callback_data='undo'),
        InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data='save')
    ])
    return InlineKeyboardMarkup(keyboard)


async def select_size_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤."""
    try:
        query = update.callback_query
        await query.answer()
        data = query.data

        print("\n--- Callback handler started ---")
        print(f"Data received: {data}")
        selected_sizes = context.user_data.get('selected_sizes', [])
        print(f"Sizes before operation: {selected_sizes}")

        if data == 'save':
            if not selected_sizes:
                await query.answer(text="–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–æ–∑–º—ñ—Ä.", show_alert=True)
                return SELECTING_SIZES
            await query.edit_message_text("–†–æ–∑–º—ñ—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É —É –≥—Ä–∏–≤–Ω—è—Ö.")
            return ENTERING_PRICE
        elif data == 'undo':
            if selected_sizes:
                selected_sizes.pop()
        else:
            selected_sizes.append(int(data))

        print(f"Sizes after operation: {selected_sizes}")

        keyboard = create_sizes_keyboard(selected_sizes)
        text = "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(map(str, sorted(selected_sizes))) if selected_sizes else "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏:"
        
        print("--- Preparing to edit message ---")
        await query.edit_message_text(text=text, reply_markup=keyboard)
        print("--- Message edited successfully, handler finished ---")

        return SELECTING_SIZES
    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ select_size_callback: {e}")
        return SELECTING_SIZES


async def price_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É, –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    price_text = update.message.text
    if not price_text.isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Å–ª–∞.")
        return ENTERING_PRICE

    context.user_data['price'] = int(price_text)

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    file_id = context.user_data['photo_id']
    selected_sizes = context.user_data['selected_sizes']
    price = context.user_data['price']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª–∏–Ω —Å—Ç–µ–ª–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    insole_lengths = {
        size: INSOLE_LENGTH_MAP.get(size) for size in selected_sizes
    }
    insole_lengths_json = json.dumps(insole_lengths)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
    product_id = add_product(
        file_id=file_id, price=price, sizes=selected_sizes,
        insole_lengths_json=insole_lengths_json
    )

    # –ì–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
    formatted_sizes = []
    for size in sorted(selected_sizes):
        length = insole_lengths.get(size)
        if length is not None:
            formatted_sizes.append(f"{size} ({length} —Å–º)")
        else:
            formatted_sizes.append(str(size))
    sizes_str = ", ".join(formatted_sizes)
    caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
               f"{sizes_str} —Ä–æ–∑–º—ñ—Ä\n"
               f"{price} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url=f"https://t.me/{BOT_USERNAME}?start=buy_{product_id}")]]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª, –æ–ø—Ä–µ–¥–µ–ª—è—è —Ç–∏–ø –º–µ–¥–∏–∞
    if file_id.startswith("BAAC"):  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤–∏–¥–µ–æ
        sent_message = await context.bot.send_video(
            chat_id=CHANNEL_ID, video=file_id, caption=caption, reply_markup=keyboard
        )
    else:
        sent_message = await context.bot.send_photo(
            chat_id=CHANNEL_ID, photo=file_id, caption=caption, reply_markup=keyboard
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑—É
    update_message_id(product_id, sent_message.message_id)

    await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")
    return ConversationHandler.END


async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏."""
    products = get_all_products()

    if not products:
        await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    for product in products:
        caption = f"–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω.\n–†–æ–∑–º—ñ—Ä–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['sizes']}"

        is_admin = update.effective_user.id == ADMIN_ID
        if is_admin:
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{product['id']}"),
                    InlineKeyboardButton("üîÅ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"repub_{product['id']}")
                ]
            ])
        else:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url=f"https://t.me/{BOT_USERNAME}?start=buy_{product['id']}")]]
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if product['file_id'].startswith("BAAC"):
            await update.message.reply_video(
                video=product['file_id'], caption=caption, reply_markup=keyboard
            )
        else:
            await update.message.reply_photo(
                photo=product['file_id'], caption=caption, reply_markup=keyboard
            )


async def size_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: ps_{product_id}_{size})
    _, product_id, selected_size = query.data.split('_')

    text = (f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–º—ñ—Ä {selected_size}. –¢–æ–≤–∞—Ä –±—É–¥–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –¥–ª—è –≤–∞—Å –Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω "
            f"–ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤.\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏:")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞", callback_data=f"payment_prepay_{product_id}_{selected_size}")],
        [InlineKeyboardButton("–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞", callback_data=f"payment_full_{product_id}_{selected_size}")]
    ])

    await query.message.reply_text(text, reply_markup=keyboard)


async def payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –≤–∏–∑—É–∞–ª—å–Ω–æ —É–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑ –∫–∞–Ω–∞–ª–∞,
    –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä, –Ω–æ –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    query = update.callback_query
    await query.answer()
    print("--- –û–¢–õ–ê–î–ö–ê: –®–∞–≥ 1/7 - –í—Ö–æ–¥ –≤ payment_callback ---")

    user_id = update.effective_user.id
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Ñ–æ—Ä–º–∞—Ç: payment_{type}_{product_id}_{size})
    _, payment_type, product_id_str, selected_size = query.data.split('_')
    product_id = int(product_id_str)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±—Ä–æ–Ω—å
    reservations_for_product = active_reservations.setdefault(product_id, set())
    reservations_for_product.add(selected_size)
    print(f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {active_reservations}")

    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
    product = get_product_by_id(product_id)
    if not product or not product['message_id']:
        await query.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ —Ç–æ–≤–∞—Ä–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    # a. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –ë–î
    all_db_sizes = set(product['sizes'].split(','))
    # b. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    all_reserved_sizes = active_reservations.get(product_id, set())
    # c. –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    final_available_sizes = sorted([size for size in all_db_sizes if size not in all_reserved_sizes], key=int)

    print("--- –û–¢–õ–ê–î–ö–ê: –®–∞–≥ 2/7 - –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ ---")
    try:
        if final_available_sizes:
            new_sizes_str = ", ".join(final_available_sizes)
            new_caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
                           f"{new_sizes_str} —Ä–æ–∑–º—ñ—Ä\n"
                           f"{product['price']} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url=f"https://t.me/{BOT_USERNAME}?start=buy_{product['id']}")]])
            await context.bot.edit_message_caption(
                chat_id=CHANNEL_ID,
                message_id=product['message_id'],
                caption=new_caption,
                reply_markup=keyboard
            )
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä
            new_caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
                           f"–ü–†–û–î–ê–ù–û\n"
                           f"{product['price']} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
            await context.bot.edit_message_caption(
                chat_id=CHANNEL_ID,
                message_id=product['message_id'],
                caption=new_caption,
                reply_markup=None
            )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±—Ä–æ–Ω—å
        await query.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END
    print("--- –û–¢–õ–ê–î–ö–ê: –®–∞–≥ 3/7 - –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω ---")

    print("--- –û–¢–õ–ê–î–ö–ê: –®–∞–≥ 4/7 - –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ ---")
    # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏
    job = context.job_queue.run_once(
        cancel_reservation,
        1800,  # 30 –º–∏–Ω—É—Ç
        data={'user_id': user_id, 'product_id': product_id, 'selected_size': selected_size},
        name=f"reservation_{user_id}_{product_id}"
    )
    print("--- –û–¢–õ–ê–î–ö–ê: –®–∞–≥ 5/7 - –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ---")

    # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['reservation_job'] = job
    context.user_data['product_id'] = product_id
    context.user_data['selected_size'] = selected_size

    # –®–∞–≥ 4: –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.edit_message_reply_markup(reply_markup=None)
    print("--- –û–¢–õ–ê–î–ö–ê: –®–∞–≥ 6/7 - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---")
    await query.message.reply_text(
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏: {PAYMENT_DETAILS}\n"
        "–¢–æ–≤–∞—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ. –£ –≤–∞—Å —î 30 —Ö–≤–∏–ª–∏–Ω, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ —Ñ–∞–π–ª, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –æ–ø–ª–∞—Ç—É. "
        "–í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –±—Ä–æ–Ω—å –±—É–¥–µ —Å–∫–∞—Å–æ–≤–∞–Ω–∞, —ñ —Ç–æ–≤–∞—Ä –∑–Ω–æ–≤—É —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–º."
    )

    print("--- –û–¢–õ–ê–î–ö–ê: –®–∞–≥ 7/7 - –í—ã—Ö–æ–¥ –∏–∑ payment_callback ---")
    return AWAITING_PROOF


async def cancel_reservation(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –±—Ä–æ–Ω—å, –≤–æ–∑–≤—Ä–∞—â–∞—è –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    job_data = context.job.data
    product_id = job_data['product_id']
    user_id = job_data['user_id']
    selected_size = job_data['selected_size']

    # –°–Ω–∏–º–∞–µ–º –±—Ä–æ–Ω—å –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if product_id in active_reservations:
        active_reservations[product_id].discard(selected_size)
        # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –±—Ä–æ–Ω–µ–π, —É–¥–∞–ª—è–µ–º –∫–ª—é—á
        if not active_reservations[product_id]:
            del active_reservations[product_id]
    print(f"–ë—Ä–æ–Ω—å —Å–Ω—è—Ç–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É: {active_reservations}")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î (—Ç–∞–º —Ä–∞–∑–º–µ—Ä –Ω–µ —É–¥–∞–ª—è–ª—Å—è)
    product = get_product_by_id(product_id)
    if not product or not product['message_id']:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏: —Ç–æ–≤–∞—Ä {product_id} –∏–ª–∏ message_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ù–∞ –∂–∞–ª—å, —á–∞—Å –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä—É (ID: {product_id}, —Ä–æ–∑–º—ñ—Ä: {selected_size}) –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –í–∞—à–∞ –±—Ä–æ–Ω—å —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )
        return

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –≤ –ø–æ—Å—Ç–µ –∫–∞–Ω–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã
    original_sizes_str = ", ".join(sorted(product['sizes'].split(','), key=int))

    new_caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
                   f"{original_sizes_str} —Ä–æ–∑–º—ñ—Ä\n"
                   f"{product['price']} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url=f"https://t.me/{BOT_USERNAME}?start=buy_{product['id']}")]])

    try:
        await context.bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=product['message_id'],
            caption=new_caption,
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(
        chat_id=user_id,
        text=f"–ù–∞ –∂–∞–ª—å, —á–∞—Å –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä—É (ID: {product_id}, —Ä–æ–∑–º—ñ—Ä: {selected_size}) –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –í–∞—à–∞ –±—Ä–æ–Ω—å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –¢–æ–≤–∞—Ä –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
    )


async def proof_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã, –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û."""
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏
    job = context.user_data.get('reservation_job')
    if job:
        job.schedule_removal()
        print(f"–¢–∞–π–º–µ—Ä –±—Ä–æ–Ω–∏ {job.name} –æ—Ç–º–µ–Ω–µ–Ω.")

    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id

    if file_id:
        context.user_data['proof_file_id'] = file_id

    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ. "
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ü–Ü–ë (–ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è, –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ)."
    )
    return AWAITING_NAME


async def name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    context.user_data['full_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    return AWAITING_PHONE


async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥."""
    context.user_data['phone_number'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –º—ñ—Å—Ç–æ.")
    return AWAITING_CITY


async def city_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏."""
    context.user_data['city'] = update.message.text
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data='delivery_np')],
        [InlineKeyboardButton("–£–∫—Ä–ø–æ—à—Ç–∞", callback_data='delivery_up')]
    ])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
    return AWAITING_DELIVERY_CHOICE


async def delivery_choice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'delivery_np':
        context.user_data['delivery_method'] = '–ù–æ–≤–∞ –ü–æ—à—Ç–∞'
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç—É –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏.")
        return AWAITING_NP_DETAILS
    elif data == 'delivery_up':
        context.user_data['delivery_method'] = '–£–∫—Ä–ø–æ—à—Ç–∞'
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –í–∞—à –ø–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å.")
        return AWAITING_UP_DETAILS


async def delivery_details_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏, —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–µ—Ç–∞–ª—å (–Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ –∏–Ω–¥–µ–∫—Å)
    context.user_data['delivery_final_detail'] = update.message.text
    user_id = update.effective_user.id

    # 1. –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = context.user_data
    product_id = user_data.get('product_id')
    selected_size = user_data.get('selected_size')
    proof_file_id = user_data.get('proof_file_id')
    full_name = user_data.get('full_name')
    phone_number = user_data.get('phone_number')
    city = user_data.get('city')
    delivery_method = user_data.get('delivery_method')
    delivery_final_detail = user_data.get('delivery_final_detail')

    product = get_product_by_id(product_id)
    if not product:
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –≤–∞—à–∏–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É."
        )
        context.user_data.clear()
        return ConversationHandler.END

    # 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å "–∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞" –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    order_details = (
        f"üö® <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b> üö®\n\n"
        f"<b>–¢–æ–≤–∞—Ä ID:</b> {product_id}\n"
        f"<b>–û–±—Ä–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä:</b> {selected_size}\n"
        f"<b>–¶—ñ–Ω–∞:</b> {product['price']} –≥—Ä–Ω\n\n"
        f"üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b>\n"
        f"<b>–ü–Ü–ë:</b> {full_name}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
        f"<b>–ú—ñ—Å—Ç–æ:</b> {city}\n"
    )
    if delivery_method == '–ù–æ–≤–∞ –ü–æ—à—Ç–∞':
        order_details += f"<b>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ü–æ—à—Ç–æ–º–∞—Ç –ù–ü:</b> {delivery_final_detail}"
    else:
        order_details += f"<b>–Ü–Ω–¥–µ–∫—Å –£–∫—Ä–ø–æ—à—Ç–∏:</b> {delivery_final_detail}"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"confirm_{product_id}_{selected_size}_{user_id}")]
    ])

    # 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    product_file_id = product['file_id']
    if product_file_id.startswith("BAAC"):
        await context.bot.send_video(chat_id=ADMIN_ID, video=product_file_id)
    else:
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=product_file_id)

    await context.bot.send_photo(chat_id=ADMIN_ID, photo=proof_file_id, caption="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞")
    await context.bot.send_message(chat_id=ADMIN_ID, text=order_details, reply_markup=keyboard, parse_mode='HTML')

    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –í—Å—ñ –¥–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É."
    )
    context.user_data.clear()
    return ConversationHandler.END


async def confirm_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: —É–¥–∞–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑ –ë–î,
    —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    query = update.callback_query
    await query.answer()

    # 1. –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
    try:
        _, product_id_str, selected_size, user_id_str = query.data.split('_')
        product_id = int(product_id_str)
        user_id = int(user_id_str)
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤ confirm_order_callback: {e}")
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ –∫–Ω–æ–ø—Ü—ñ.")
        return

    # 2. –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑ –ë–î
    product = get_product_by_id(product_id)
    if not product:
        await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    current_sizes = product['sizes'].split(',')
    if selected_size in current_sizes:
        current_sizes.remove(selected_size)
        new_sizes_str = ",".join(sorted(current_sizes, key=int))
        update_product_sizes(product_id, new_sizes_str)

        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –±—Ä–æ–Ω—å –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if product_id in active_reservations:
            active_reservations[product_id].discard(selected_size)
            if not active_reservations[product_id]:
                del active_reservations[product_id]
        print(f"–ë—Ä–æ–Ω—å —Å–Ω—è—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {active_reservations}")
    else:
        await query.answer("–¶–µ–π —Ä–æ–∑–º—ñ—Ä –≤–∂–µ –±—É–ª–æ –ø—Ä–æ–¥–∞–Ω–æ –∞–±–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.", show_alert=True)
        return

    # 3. –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –ø–æ—Å–∏–ª–∫—É –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –º–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞–º –Ω–æ–º–µ—Ä –¢–¢–ù."
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {user_id}: {e}")

    # 4. –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    new_text = query.message.text + "\n\n<b>‚úÖ –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û</b>"
    await query.edit_message_text(text=new_text, reply_markup=None, parse_mode='HTML')

async def republish_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ'."""
    try:
        print("\n--- republish_callback started ---")
        query = update.callback_query
        await query.answer()

        product_id = int(query.data.split('_')[1])
        print(f"Received product_id: {product_id}")
        product = get_product_by_id(product_id)

        if not product:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        sizes_str = ", ".join(sorted(product['sizes'].split(',')))
        caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
                   f"{sizes_str} —Ä–æ–∑–º—ñ—Ä\n"
                   f"{product['price']} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url=f"https://t.me/{BOT_USERNAME}?start=buy_{product_id}")]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª, –æ–ø—Ä–µ–¥–µ–ª—è—è —Ç–∏–ø –º–µ–¥–∏–∞
        file_id = product['file_id']
        print(f"Attempting to send post for product {product_id} to channel...")
        if file_id.startswith("BAAC"):
            sent_message = await context.bot.send_video(
                chat_id=CHANNEL_ID, video=file_id, caption=caption, reply_markup=keyboard)
        else:
            sent_message = await context.bot.send_photo(
                chat_id=CHANNEL_ID, photo=file_id, caption=caption, reply_markup=keyboard)
        print(f"Post sent successfully. New message_id: {sent_message.message_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –±–∞–∑–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print(f"Attempting to update message_id for product {product_id} in DB...")
        update_message_id(product_id, sent_message.message_id)

        print("Attempting to send confirmation to admin...")
        await query.message.reply_text(f"–¢–æ–≤–∞—Ä ID: {product_id} —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        await query.edit_message_reply_markup(reply_markup=None)
        print("--- republish_callback finished successfully ---")
    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ republish_callback: {e}")


async def edit_product_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏' –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    try:
        product_id = int(query.data.split('_')[1])
    except (IndexError, ValueError):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É.")
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"edit_price_{product_id}")],
        [InlineKeyboardButton("üìè –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏", callback_data=f"edit_sizes_{product_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_catalog_{product_id}")]
    ])

    await query.edit_message_reply_markup(reply_markup=keyboard)


async def back_to_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    query = update.callback_query
    await query.answer()

    try:
        product_id = int(query.data.split('_')[3])
    except (IndexError, ValueError):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É.")
        return

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{product_id}"),
            InlineKeyboardButton("üîÅ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"repub_{product_id}")
        ]
    ])

    await query.edit_message_reply_markup(reply_markup=keyboard)


async def edit_price_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    query = update.callback_query
    await query.answer()

    product_id = int(query.data.split('_')[2])
    context.user_data['current_product_id'] = product_id
    context.user_data['message_to_edit_id'] = query.message.message_id

    await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É:")
    return ENTERING_NEW_PRICE


async def receive_new_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    new_price_text = update.message.text
    if not new_price_text.isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Å–ª–∞.")
        return ENTERING_NEW_PRICE

    new_price = int(new_price_text)
    product_id = context.user_data.get('current_product_id')
    message_id = context.user_data.get('message_to_edit_id')
    chat_id = update.effective_chat.id

    if not product_id or not message_id:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    update_product_price(product_id, new_price)
    product = get_product_by_id(product_id)

    new_caption = f"–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω.\n–†–æ–∑–º—ñ—Ä–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['sizes']}"
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{product_id}"),
            InlineKeyboardButton("üîÅ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"repub_{product_id}")
        ]
    ])

    await context.bot.edit_message_caption(
        chat_id=chat_id, message_id=message_id, caption=new_caption, reply_markup=keyboard
    )
    await update.message.reply_text("‚úÖ –¶—ñ–Ω—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

    context.user_data.pop('current_product_id', None)
    context.user_data.pop('message_to_edit_id', None)
    return ConversationHandler.END


async def edit_sizes_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞."""
    query = update.callback_query
    await query.answer()

    product_id = int(query.data.split('_')[2])
    product = get_product_by_id(product_id)

    if not product:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    current_sizes = [int(s) for s in product['sizes'].split(',') if s.isdigit()]

    context.user_data['current_product_id'] = product_id
    context.user_data['selected_sizes'] = current_sizes
    context.user_data['message_to_edit_id'] = query.message.message_id
    context.user_data['chat_id'] = query.message.chat_id

    keyboard = create_sizes_keyboard(current_sizes)
    await query.message.reply_text(
        "–û–Ω–æ–≤—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—è–≤–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤:",
        reply_markup=keyboard
    )
    return EDITING_SIZES


async def edit_sizes_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    data = query.data

    selected_sizes = context.user_data.get('selected_sizes', [])

    if data == 'save':
        product_id = context.user_data.get('current_product_id')
        if not product_id:
            await query.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
            return ConversationHandler.END

        new_sizes_str = ",".join(map(str, sorted(selected_sizes)))
        update_product_sizes(product_id, new_sizes_str)

        message_id = context.user_data.get('message_to_edit_id')
        chat_id = context.user_data.get('chat_id')
        product = get_product_by_id(product_id)

        new_caption = f"–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω.\n–†–æ–∑–º—ñ—Ä–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['sizes']}"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{product_id}"),
            InlineKeyboardButton("üîÅ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"repub_{product_id}")
        ]])

        await context.bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=new_caption, reply_markup=keyboard)
        await query.message.reply_text("‚úÖ –†–æ–∑–º—ñ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

        for key in ['current_product_id', 'selected_sizes', 'message_to_edit_id', 'chat_id']:
            context.user_data.pop(key, None)
        return ConversationHandler.END
    elif data == 'undo':
        if selected_sizes: selected_sizes.pop()
    else:
        size = int(data)
        if size in selected_sizes: selected_sizes.remove(size)
        else: selected_sizes.append(size)
    keyboard = create_sizes_keyboard(selected_sizes)
    text = "–û–±—Ä–∞–Ω–æ: " + ", ".join(map(str, sorted(selected_sizes))) if selected_sizes else "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏:"
    await query.edit_message_text(text=text, reply_markup=keyboard)
    return EDITING_SIZES


async def find_size_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É."""
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è –ø–æ—à—É–∫—É:")
    return AWAITING_SIZE_SEARCH


async def size_search_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    size_text = update.message.text
    if not size_text.isdigit():
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Å–ª–∞.")
        return AWAITING_SIZE_SEARCH

    size = int(size_text)
    products = get_products_by_size(size)

    if not products:
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    await update.message.reply_text("–û—Å—å —â–æ –º–∏ –∑–Ω–∞–π—à–ª–∏:")
    for product in products:
        caption = f"–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω."
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url=f"https://t.me/{BOT_USERNAME}?start=buy_{product['id']}")]]
        )

        if product['file_id'].startswith("BAAC"):
            await context.bot.send_video(
                chat_id=update.effective_chat.id,
                video=product['file_id'], caption=caption, reply_markup=keyboard
            )
        else:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=product['file_id'], caption=caption, reply_markup=keyboard
            )
    return ConversationHandler.END


async def show_delete_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    products = get_all_products()

    if not products:
        await update.message.reply_text("–£ –∫–∞—Ç–∞–ª–æ–∑—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return

    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    for product in products:
        caption = f"ID: {product['id']}\n–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω.\n–†–æ–∑–º—ñ—Ä–∏: {product['sizes']}"
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä", callback_data=f"del_{product['id']}")]]
        )

        if product['file_id'].startswith("BAAC"):
            await update.message.reply_video(
                video=product['file_id'], caption=caption, reply_markup=keyboard
            )
        else:
            await update.message.reply_photo(
                photo=product['file_id'], caption=caption, reply_markup=keyboard
            )


async def delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    query = update.callback_query
    await query.answer()

    product_id = int(query.data.split('_')[1])

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"confirm_del_{product_id}"),
            InlineKeyboardButton("‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_del")
        ]
    ])
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text(
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä ID: {product_id}?",
        reply_markup=keyboard
    )


async def confirm_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –ë–î –∏ –∫–∞–Ω–∞–ª–∞."""
    query = update.callback_query
    await query.answer()

    product_id = int(query.data.split('_')[2])
    product = get_product_by_id(product_id)

    if product and product['message_id']:
        try:
            await context.bot.delete_message(chat_id=CHANNEL_ID, message_id=product['message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {product['message_id']} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

    delete_product_by_id(product_id)
    await query.edit_message_text("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")


async def cancel_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")


async def set_details_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–º–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑ –ø–ª–∞—Ç—ñ–∂–Ω–∏–º–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏.")
    return SETTING_DETAILS


async def receive_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ config.py."""
    new_details = update.message.text
    config_path = 'config.py'

    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        for i, line in enumerate(lines):
            if line.strip().startswith('PAYMENT_DETAILS ='):
                lines[i] = f"PAYMENT_DETAILS = '{new_details}'\n"
                break

        with open(config_path, 'w', encoding='utf-8') as file:
            file.writelines(lines)

        await update.message.reply_text("‚úÖ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ config.py: {e}")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏.")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    init_db()
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('addproduct', add_product_start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.IMAGE, photo_received)],
            SELECTING_SIZES: [CallbackQueryHandler(select_size_callback)],
            ENTERING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    payment_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(payment_callback, pattern='^payment_')],
        states={
            AWAITING_PROOF: [MessageHandler(filters.PHOTO | filters.Document.ALL, proof_received)],
            AWAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_received)],
            AWAITING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_received)],
            AWAITING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_received)],
            AWAITING_DELIVERY_CHOICE: [CallbackQueryHandler(delivery_choice_callback)],
            AWAITING_NP_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_details_received)],
            AWAITING_UP_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_details_received)],
        },
        fallbacks=[],
        allow_reentry=True
    )

    details_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('set_details', set_details_start)],
        states={
            SETTING_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_details)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    edit_price_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_price_start, pattern='^edit_price_')],
        states={
            ENTERING_NEW_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new_price)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    edit_sizes_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_sizes_start, pattern='^edit_sizes_')],
        states={
            EDITING_SIZES: [CallbackQueryHandler(edit_sizes_callback)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    find_size_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('findsize', find_size_start)],
        states={
            AWAITING_SIZE_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, size_search_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(details_conv_handler)
    application.add_handler(edit_price_conv_handler)
    application.add_handler(edit_sizes_conv_handler)
    application.add_handler(find_size_conv_handler)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(payment_conv_handler)
    application.add_handler(CommandHandler("catalog", show_catalog))
    application.add_handler(CommandHandler("delete", show_delete_list))
    application.add_handler(CallbackQueryHandler(delete_callback, pattern='^del_'))
    application.add_handler(CallbackQueryHandler(confirm_delete_callback, pattern='^confirm_del_'))
    application.add_handler(CallbackQueryHandler(cancel_delete_callback, pattern='^cancel_del$'))
    application.add_handler(CallbackQueryHandler(republish_callback, pattern='^repub_'))
    application.add_handler(CallbackQueryHandler(edit_product_callback, pattern='^edit_'))
    application.add_handler(CallbackQueryHandler(back_to_catalog_callback, pattern='^back_to_catalog_'))
    application.add_handler(CallbackQueryHandler(size_callback, pattern='^ps_'))
    application.add_handler(CallbackQueryHandler(confirm_order_callback, pattern='^confirm_'))

    application.run_polling()


if __name__ == '__main__':
    main()