import asyncio

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (Application, CommandHandler, ContextTypes,
                          ConversationHandler, MessageHandler, filters,
                          CallbackQueryHandler)

from config import ADMIN_ID, CHANNEL_ID, TELEGRAM_BOT_TOKEN
from database import (add_product, get_all_products, get_product_by_id, init_db,
                      set_product_sold, update_message_id,
                      update_product_sizes)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
PHOTO, SELECTING_SIZES, ENTERING_PRICE = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –æ–±—É–≤–∏.")


async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")
    return PHOTO


async def photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã."""
    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.video:
        file_id = update.message.video.file_id
    elif update.message.document:
        file_id = update.message.document.file_id

    context.user_data['photo_id'] = file_id
    context.user_data['selected_sizes'] = []

    keyboard = create_sizes_keyboard([])
    await update.message.reply_text("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:",
                                    reply_markup=keyboard)
    return SELECTING_SIZES


def create_sizes_keyboard(selected_sizes: list[int]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤."""
    keyboard = []
    all_sizes = list(range(28, 49))
    row = []
    for size in all_sizes:
        text = f"[ {size} ]" if size in selected_sizes else f"  {size}  "
        row.append(InlineKeyboardButton(text, callback_data=str(size)))
        if len(row) == 5:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data='undo'),
        InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save')
    ])
    return InlineKeyboardMarkup(keyboard)


async def select_size_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤."""
    try:
        query = update.callback_query
        await query.answer()
        data = query.data

        print("\n--- Callback handler started ---")
        print(f"Data received: {data}")
        selected_sizes = context.user_data.get('selected_sizes', [])
        print(f"Sizes before operation: {selected_sizes}")

        if data == 'save':
            if not selected_sizes:
                await query.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä.", show_alert=True)
                return SELECTING_SIZES
            await query.edit_message_text("–†–∞–∑–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö.")
            return ENTERING_PRICE
        elif data == 'undo':
            if selected_sizes:
                selected_sizes.pop()
        else:
            selected_sizes.append(int(data))

        print(f"Sizes after operation: {selected_sizes}")

        keyboard = create_sizes_keyboard(selected_sizes)
        text = "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(map(str, sorted(selected_sizes))) if selected_sizes else "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:"
        
        print("--- Preparing to edit message ---")
        await query.edit_message_text(text=text, reply_markup=keyboard)
        print("--- Message edited successfully, handler finished ---")

        return SELECTING_SIZES
    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ select_size_callback: {e}")
        return SELECTING_SIZES


async def price_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É, –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    price_text = update.message.text
    if not price_text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")
        return ENTERING_PRICE

    context.user_data['price'] = int(price_text)

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    file_id = context.user_data['photo_id']
    selected_sizes = context.user_data['selected_sizes']
    price = context.user_data['price']

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
    product_id = add_product(file_id=file_id, price=price, sizes=selected_sizes)

    # –ì–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
    sizes_str = ", ".join(map(str, sorted(selected_sizes)))
    caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
               f"{sizes_str} —Ä–æ–∑–º—ñ—Ä\n"
               f"{price} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")]]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª, –æ–ø—Ä–µ–¥–µ–ª—è—è —Ç–∏–ø –º–µ–¥–∏–∞
    if file_id.startswith("BAAC"):  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤–∏–¥–µ–æ
        sent_message = await context.bot.send_video(
            chat_id=CHANNEL_ID, video=file_id, caption=caption, reply_markup=keyboard
        )
    else:
        sent_message = await context.bot.send_photo(
            chat_id=CHANNEL_ID, photo=file_id, caption=caption, reply_markup=keyboard
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑—É
    update_message_id(product_id, sent_message.message_id)

    await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
    return ConversationHandler.END


async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏."""
    products = get_all_products()

    if not products:
        await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    for product in products:
        caption = f"–¶–µ–Ω–∞: {product['price']} –≥—Ä–Ω.\n–†–∞–∑–º–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏: {product['sizes']}"

        is_admin = update.effective_user.id == ADMIN_ID
        if is_admin:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîÅ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"repub_{product['id']}")]]
            )
        else:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product['id']}")]]
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if product['file_id'].startswith("BAAC"):
            await update.message.reply_video(
                video=product['file_id'], caption=caption, reply_markup=keyboard
            )
        else:
            await update.message.reply_photo(
                photo=product['file_id'], caption=caption, reply_markup=keyboard
            )


async def buy_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å' –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: buy_{id})
    product_id = int(query.data.split('_')[1])

    product = get_product_by_id(product_id)

    if not product:
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
    file_id = product['file_id']
    if file_id.startswith("BAAC"):
        await context.bot.send_video(chat_id=query.from_user.id, video=file_id)
    else:
        await context.bot.send_photo(chat_id=query.from_user.id, photo=file_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –≤ —Å–ø–∏—Å–æ–∫
    available_sizes = product['sizes'].split(',')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    keyboard_buttons = [
        InlineKeyboardButton(size, callback_data=f"ps_{product['id']}_{size}")
        for size in available_sizes
    ]
    keyboard = [keyboard_buttons[i:i + 5] for i in range(0, len(keyboard_buttons), 5)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–∑–º–µ—Ä:",
        reply_markup=reply_markup
    )


async def size_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: ps_{product_id}_{size})
    _, product_id, selected_size = query.data.split('_')

    text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä {selected_size}. –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∞—Å –Ω–∞ 30 –º–∏–Ω—É—Ç "
            f"–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", callback_data=f"payment_prepay_{product_id}_{selected_size}")],
        [InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"payment_full_{product_id}_{selected_size}")]
    ])

    await query.message.reply_text(text, reply_markup=keyboard)


async def payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã, –±—Ä–æ–Ω–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Ñ–æ—Ä–º–∞—Ç: payment_{type}_{product_id}_{size})
    _, payment_type, product_id, selected_size = query.data.split('_')
    product_id = int(product_id)

    # –®–∞–≥ –ê: –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    await query.message.reply_text(
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: [–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã].\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await query.edit_message_reply_markup(reply_markup=None)

    # –®–∞–≥ –ë: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ
    product = get_product_by_id(product_id)
    if not product or not product['message_id']:
        print(f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä {product_id} –∏–ª–∏ message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞.")
        return

    # –®–∞–≥ –í: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    current_sizes = product['sizes'].split(',')
    if selected_size in current_sizes:
        current_sizes.remove(selected_size)

    new_sizes_str = ",".join(sorted(current_sizes, key=int))
    update_product_sizes(product_id, new_sizes_str)

    # –®–∞–≥ –ì: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
    if new_sizes_str:
        new_caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
                       f"{new_sizes_str} —Ä–æ–∑–º—ñ—Ä\n"
                       f"{product['price']} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product['id']}")]])
        await context.bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=product['message_id'],
            caption=new_caption, reply_markup=keyboard
        )
    else:  # –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ–¥–∞–Ω—ã
        new_caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
                       f"–ü–†–û–î–ê–ù–û\n"
                       f"{product['price']} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
        await context.bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=product['message_id'],
            caption=new_caption, reply_markup=None
        )


async def republish_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ'."""
    try:
        print("\n--- republish_callback started ---")
        query = update.callback_query
        await query.answer()

        product_id = int(query.data.split('_')[1])
        print(f"Received product_id: {product_id}")
        product = get_product_by_id(product_id)

        if not product:
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        sizes_str = ", ".join(sorted(product['sizes'].split(',')))
        caption = (f"–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞\n"
                   f"{sizes_str} —Ä–æ–∑–º—ñ—Ä\n"
                   f"{product['price']} –≥—Ä–Ω –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª, –æ–ø—Ä–µ–¥–µ–ª—è—è —Ç–∏–ø –º–µ–¥–∏–∞
        file_id = product['file_id']
        print(f"Attempting to send post for product {product_id} to channel...")
        if file_id.startswith("BAAC"):
            sent_message = await context.bot.send_video(
                chat_id=CHANNEL_ID, video=file_id, caption=caption, reply_markup=keyboard)
        else:
            sent_message = await context.bot.send_photo(
                chat_id=CHANNEL_ID, photo=file_id, caption=caption, reply_markup=keyboard)
        print(f"Post sent successfully. New message_id: {sent_message.message_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –±–∞–∑–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print(f"Attempting to update message_id for product {product_id} in DB...")
        update_message_id(product_id, sent_message.message_id)

        print("Attempting to send confirmation to admin...")
        await query.message.reply_text(f"–¢–æ–≤–∞—Ä ID: {product_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        await query.edit_message_reply_markup(reply_markup=None)
        print("--- republish_callback finished successfully ---")
    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ republish_callback: {e}")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    init_db()
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('addproduct', add_product_start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.IMAGE, photo_received)],
            SELECTING_SIZES: [CallbackQueryHandler(select_size_callback)],
            ENTERING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("catalog", show_catalog))
    application.add_handler(CallbackQueryHandler(buy_callback, pattern='^buy_'))
    application.add_handler(CallbackQueryHandler(republish_callback, pattern='^repub_'))
    application.add_handler(CallbackQueryHandler(size_callback, pattern='^ps_'))
    application.add_handler(CallbackQueryHandler(payment_callback, pattern='^payment_'))

    application.run_polling()


if __name__ == '__main__':
    main()